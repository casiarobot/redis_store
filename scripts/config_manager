#!/usr/bin/env python
# coding=utf-8
import redis
import sys

import roslib; roslib.load_manifest('redis_store')
import rospy
import os
import collections
import json
import six

from redis_store.srv import (
    GetParam, SetParam, SaveDeleteParam, ResetParams,
    GetParamResponse, SetParamResponse, SaveDeleteParamResponse, ResetParamsResponse)
from std_msgs.msg import String
from redis_store import RedisDict
from std_srvs.srv import *
import rosparam


class ConfigManager(object):
    def __init__(self):
        rospy.init_node("config_manager")

        self._create_dbs()
        self._load_defaults(rospy.get_param("~defaults_path"))
        self._load_settings_into_rosparam()
        self._advertise_service()

        # self._list_params()

        # Start the main loop
        rospy.spin()

    def _load_settings_into_rosparam(self):
        for name in self._defaults.keys():
            val = self._defaults[name]
            if name not in self._local:
                rospy.set_param(name, val)
        for name in self._local.keys():
            val = self._local[name]
            rospy.set_param(name, val)

    def _advertise_service(self):
        self._getparam_srv = rospy.Service(
            'config_manager/get_param',
            GetParam,
            self._getparam_srv_cb
        )
        self._setparam_srv = rospy.Service(
            'config_manager/set_param',
            SetParam,
            self._setparam_srv_cb
        )
        self._saveparam_srv = rospy.Service(
            'config_manager/save_param',
            SaveDeleteParam,
            self._saveparam_srv_cb
        )
        self._deleteparam_srv = rospy.Service(
            'config_manager/delete_param',
            SaveDeleteParam,
            self._deleteparam_srv_cb
        )
        self._resetparams_srv = rospy.Service(
            'config_manager/reset_params',
            ResetParams,
            self._resetparams_srv_cb
        )
        self._update_pub = rospy.Publisher(
            'config_manager/update',
            String,
            queue_size=10,
        )

    def _create_dbs(self):
        redis_namespace = rospy.get_param('redis_namespace', 'ros')
        redis_host = rospy.get_param('redis_host', 'localhost')
        redis_port = rospy.get_param('redis_port', 6379)
        redis_db = rospy.get_param('redis_db', 0)

        self._defaults = {}
        self._defaults_source = {}
        self._local = RedisDict(
            namespace=redis_namespace,
            host=redis_host,
            port=redis_port,
            db=redis_db,
        )

        try:
            self._local.redis.ping()
        except redis.ConnectionError:
            rospy.logerr("Could not establish a connection to the Redis server {}:{}".format(
                redis_host, redis_port,
            ))
            sys.exit(1)

    def _load_defaults(self, path):
        try:
            if len(path) == 0:
                raise KeyError()
        except KeyError:
            rospy.loginfo("Default parameters path not supplied, assuming none.")
            return

        if path.startswith("pkg://"):
            parts = path.split("//")
            parts = parts[1].split("/", 1)
            pkg = parts[0]
            pkg_dir = parts[1]
            try:
                path = os.path.join(roslib.packages.get_pkg_dir(pkg), pkg_dir)
            except roslib.packages.InvalidROSPkgException:
                rospy.logerr("Supplied defaults path '%s' cannot be found. \n" % path +
                             "The ROS package '%s' could not be located." % pkg)
                sys.exit(1)
        if not os.path.isdir(path):
            rospy.logwarn("Defaults path '%s' does not exist." % path)
            sys.exit(1)
        try:
            files = os.listdir(path)
        except OSError:
            rospy.logerr("Can't list defaults directory %s. Check permissions." % path)
            sys.exit(1)
        defaults = []  # a list of 3-tuples, (param, val, originating_filename)

        def flatten(d, c="", f_name=""):
            lst = []
            for k, v in six.iteritems(d):
                if isinstance(v, collections.Mapping):
                    lst.extend(flatten(v, c + "/" + k, f_name))
                else:
                    lst.append((c + "/" + k, v, f_name))
            return lst

        for f in files:
            if not f.endswith(".yaml"):
                continue
            params = rosparam.load_file(os.path.join(path, f))
            rospy.loginfo("Found default parameter file %s" % f)
            for p, n in params:
                defaults.extend(flatten(p, c="", f_name=f))

        # Copy the defaults into the DB if not there already
        for param, val, filename in defaults:
            existing = self._defaults.get(param, None)
            existing_source = self._defaults_source.get(param, None)
            if (existing is None) or (existing_source is None):
                rospy.loginfo("New default parameter for %s" % param)
                self._defaults[param] = val
                self._defaults_source[param] = filename
            elif existing_source != filename:
                rospy.logerr("Two defaults parameter files have the same key:\n%s and %s, key %s" %
                             (existing_source, filename, param))
                # Delete the entry so that it can be fixed...
                if param in self._defaults:
                    del self._defaults[param]
                if param in self._defaults_source:
                    del self._defaults_source[param]
                rospy.signal_shutdown("Default parameter set error")
            else:
                rospy.loginfo("Updating stored default for %s" % param)
                self._defaults[param] = val

    def _list_params(self):
        """
        debug function, prints out all parameters known
        """
        rospy.loginfo("Defaults:")
        for name in self._defaults.keys():
            val = self._defaults[name]
            filename = self._defaults_source[name]
            rospy.loginfo('name: {}, value: {}, filename: {}'.format(
                name, val, filename
                ))

    def _getparam_srv_cb(self, req):
        """
        Could just use the ros parameter server to get the params
        but one day might not back onto the parameter server...
        """
        response = GetParamResponse()
        value = self._local.get(req.param_name)
        if value is None:
            value = self._defaults.get(req.param_name)
        if value is None:
            value = rospy.get_param(req.param_name, None)
        if value is None:
            response.success = False
            return response
        response.success = True
        response.param_value = json.dumps(value)
        return response

    def _setparam_srv_cb(self, req):
        """
        Set the local site-specific parameter.
        """
        try:
            value = json.loads(req.param_value)
        except TypeError:
            rospy.logerr('New parameter value must be JSON encoded')
            return SetParamResponse(False)
        self._local[req.param_name] = value
        rospy.set_param(req.param_name, value)
        self._update_pub.publish(req.param_name)
        return SetParamResponse(True)

    def _saveparam_srv_cb(self, req):
        """
        This will take the current value from the rosparam server and save it into the DB
        """
        if not rospy.has_param(req.param_name):
            rospy.logerr("Trying to set a parameter from ros parameter server, but it is not on server.")
            return SaveDeleteParamResponse(False)

        value = rospy.get_param(req.param_name)
        self._local[req.param_name] = value
        return SaveDeleteParamResponse(True)

    def _deleteparam_srv_cb(self, req):
        """
        This will remove the current value from rosparam and the local value store.
        """
        if rospy.has_param(req.param_name):
            rospy.delete_param(req.param_name)

        if req.param_name in self._local:
            del self._local[req.param_name]

        self._update_pub.publish(req.param_name)

        return SaveDeleteParamResponse(True)

    def _resetparams_srv_cb(self, _req):
        """
        This will reset the params to the default value and clear out any additional local settings.
        """
        local_names = self._local.keys()[:]
        for name in local_names:
            rospy.delete_param(name)
        self._local.clear()
        self._load_settings_into_rosparam()

        for name in set(self._defaults.keys() + local_names):
            self._update_pub.publish(name)

        return ResetParamsResponse(True)


if __name__ == '__main__':
    server = ConfigManager()
